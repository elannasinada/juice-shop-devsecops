name: "CodeQL SAST Analysis"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'

jobs:
  analyze:
    name: Analyze Code with CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      id: analyze
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        output: sarif-results
        upload: false

    - name: Upload SARIF file as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-sarif-results
        path: sarif-results
        retention-days: 30

    - name: Setup Node.js for HTML generation
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install SARIF to HTML converter
      run: |
        npm install -g @microsoft/sarif-multitool

    - name: Find and convert SARIF to HTML
      if: always()
      run: |
        echo "Looking for SARIF files..."
        find sarif-results -name "*.sarif" -type f
        
        # Convert each SARIF file to HTML
        for sarif_file in sarif-results/*.sarif; do
          if [ -f "$sarif_file" ]; then
            echo "Converting $sarif_file to HTML..."
            output_html="${sarif_file%.sarif}.html"
            
            # Create a simple HTML report
            cat > "$output_html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>CodeQL SAST Analysis Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .header { background-color: #0366d6; color: white; padding: 20px; border-radius: 5px; }
        .summary { background-color: white; padding: 20px; margin: 20px 0; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .vulnerability { background-color: white; padding: 15px; margin: 10px 0; border-left: 4px solid #d73a49; border-radius: 3px; }
        .severity-critical { border-left-color: #d73a49; }
        .severity-high { border-left-color: #e36209; }
        .severity-medium { border-left-color: #ffd33d; }
        .severity-low { border-left-color: #28a745; }
        .code { background-color: #f6f8fa; padding: 10px; border-radius: 3px; font-family: monospace; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="header">
        <h1>CodeQL SAST Analysis Report</h1>
        <p>Juice Shop DevSecOps Pipeline</p>
        <p>Generated: $(date)</p>
    </div>
    <div class="summary">
        <h2>Analysis Summary</h2>
        <p>Language: JavaScript/TypeScript</p>
        <p>Repository: juice-shop-devsecops</p>
EOF

            # Extract results count from SARIF
            total_results=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
            
            echo "        <p><strong>Total Issues Found: $total_results</strong></p>" >> "$output_html"
            echo "    </div>" >> "$output_html"
            
            # Extract vulnerabilities
            echo "    <h2>Vulnerabilities Found</h2>" >> "$output_html"
            
            jq -r '.runs[0].results[] | 
                "<div class=\"vulnerability severity-" + (.level // "warning") + "\">" +
                "<h3>" + .message.text + "</h3>" +
                "<p><strong>Severity:</strong> " + (.level // "warning") + "</p>" +
                "<p><strong>Rule ID:</strong> " + .ruleId + "</p>" +
                "<p><strong>Location:</strong> " + (.locations[0].physicalLocation.artifactLocation.uri // "N/A") + 
                " (Line " + (.locations[0].physicalLocation.region.startLine // 0 | tostring) + ")</p>" +
                "</div>"' "$sarif_file" >> "$output_html" 2>/dev/null || echo "<p>No detailed results available</p>" >> "$output_html"
            
            echo "</body></html>" >> "$output_html"
            
            echo "âœ… HTML report generated: $output_html"
          fi
        done
        
        # Also save raw SARIF for inspection
        cp sarif-results/*.sarif codeql-results.sarif 2>/dev/null || echo "No SARIF file to copy"

    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-html-report
        path: |
          sarif-results/*.html
          sarif-results/*.sarif
        retention-days: 30

    - name: Display Results Summary
      if: always()
      run: |
        echo "=== CodeQL Analysis Complete ==="
        for sarif_file in sarif-results/*.sarif; do
          if [ -f "$sarif_file" ]; then
            total=$(jq '.runs[0].results | length' "$sarif_file" 2>/dev/null || echo "0")
            echo "ðŸ“Š Total vulnerabilities found: $total"
            echo "ðŸ“¥ Download the HTML report from the Artifacts section"
          fi
        done